#!/usr/bin/env python3

import argparse
import sys
import subprocess
import os.path as path


def prfgen(arguments):
	qmake_res = subprocess.run([arguments.qmake, "-query", "QT_HOST_DATA"], check=True, stdout=subprocess.PIPE, encoding="UTF-8")
	prf_path =path.join(str(qmake_res.stdout).strip(), "mkspecs", "features", "qdep.prf")
	print("Generating PRF-File as: ", prf_path)
	with open(prf_path, "w") as prf_file:
		self_path = path.abspath(__file__)
		prf_file.write(qdep_prf.format(self_path, self_path))


def resolve(arguments):
	print(arguments)


qdep_prf="""# Generated by {}
QDEP_PATH = $$shell_path({})
win32: QDEP_PATH = python $$QDEP_PATH

defineTest(qdep_include) {{
	for(arg, ARGS): qdep_dependencies += $$shell_quote($$arg)
	system($$QDEP_PATH resolve $$ARGS):return(true)
	else:return(false)
}}
"""

if __name__ == '__main__':
	parser = argparse.ArgumentParser(description="A very basic yet simple to use dependency management tool for qmake based projects")
	parser.add_argument("-v", "--version", action="version", version='%(prog)s 1.0')
	parser.add_argument("operation", action="store", choices=["prfgen", "resolve"], metavar="operation", help="Specify the operation that should be performed by qdep")
	parser.add_argument("--qmake", action="store", default="qmake", help="The path to a qmake executable to place the prf file for")

	res = parser.parse_args()
	if res.operation == "prfgen":
		result = prfgen(res)
	elif res.operation == "resolve":
		result = resolve(res)
	sys.exit(result)
